{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNAzu+FIEjZ4BeNRPLsPSjg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yjiUH-6HxEt0","executionInfo":{"status":"ok","timestamp":1721724737032,"user_tz":-180,"elapsed":383,"user":{"displayName":"Watene Keguti","userId":"00003334493310483030"}},"outputId":"c583976c-6107-421b-ba0e-e1a5f2dbb656"},"outputs":[{"output_type":"stream","name":"stdout","text":["Eigenvalues (Power Iteration): 4.675130870556675\n","Eigenvectors (Power Iteration):\n"," [0.88765103 0.4271301  0.17214973]\n","Eigenvalues (QR Algorithm): [4.67513087 3.53918887 0.78568026]\n","Eigenvectors (QR Algorithm):\n"," [[-1.00000000e+00  2.31730179e-07  5.03573448e-36]\n"," [-2.31730179e-07 -1.00000000e+00 -2.50347462e-30]\n"," [ 4.45560386e-36 -2.50347462e-30  1.00000000e+00]]\n","\n","Eigenvalue comparison:\n","\n","Eigenvector comparison:\n"]}],"source":["import numpy as np\n","\n","def power_iteration(A, num_iterations=100, tol=1e-6):\n","    \"\"\"\n","    Computes the dominant eigenvalue and eigenvector of a matrix using the Power Iteration method.\n","\n","    Args:\n","        A: The input matrix.\n","        num_iterations: The maximum number of iterations.\n","        tol: The tolerance for convergence.\n","\n","    Returns:\n","        A tuple containing the dominant eigenvalue and eigenvector.\n","    \"\"\"\n","\n","    n = A.shape[0]\n","    x = np.random.rand(n)  # Initialize with a random vector\n","\n","    for _ in range(num_iterations):\n","        x_new = A @ x\n","        x_new /= np.linalg.norm(x_new)\n","        if np.linalg.norm(x_new - x) < tol:\n","            break\n","        x = x_new\n","\n","    eigenvalue = x_new @ A @ x_new\n","    return eigenvalue, x_new\n","\n","def qr_algorithm(A, num_iterations=100, tol=1e-6):\n","    \"\"\"\n","    Computes the eigenvalues and eigenvectors of a matrix using the QR Algorithm.\n","\n","    Args:\n","        A: The input matrix.\n","        num_iterations: The maximum number of iterations.\n","        tol: The tolerance for convergence.\n","\n","    Returns:\n","        A tuple containing the eigenvalues and eigenvectors.\n","    \"\"\"\n","\n","    n = A.shape[0]\n","    Ak = A.copy()\n","\n","    for _ in range(num_iterations):\n","        Q, R = np.linalg.qr(Ak)\n","        Ak = R @ Q\n","        if np.allclose(Ak, np.diag(np.diagonal(Ak)), atol=tol):\n","            break\n","\n","    eigenvalues = np.diag(Ak)\n","    eigenvectors = Q\n","\n","    return eigenvalues, eigenvectors\n","\n","def compare_results(eigenvalues_power, eigenvectors_power, eigenvalues_qr, eigenvectors_qr):\n","    \"\"\"\n","    Compares the eigenvalues and eigenvectors obtained from the Power Iteration and QR Algorithm methods.\n","\n","    Args:\n","        eigenvalues_power: The eigenvalues computed using the Power Iteration method.\n","        eigenvectors_power: The eigenvectors computed using the Power Iteration method.\n","        eigenvalues_qr: The eigenvalues computed using the QR Algorithm.\n","        eigenvectors_qr: The eigenvectors computed using the QR Algorithm.\n","    \"\"\"\n","\n","    print(\"Eigenvalues (Power Iteration):\", eigenvalues_power)\n","    print(\"Eigenvectors (Power Iteration):\\n\", eigenvectors_power)\n","    print(\"Eigenvalues (QR Algorithm):\", eigenvalues_qr)\n","    print(\"Eigenvectors (QR Algorithm):\\n\", eigenvectors_qr)\n","\n","    # Compare eigenvalues\n","    print(\"\\nEigenvalue comparison:\")\n","\n","\n","\n","    # Compare eigenvectors (normalize to unit vectors)\n","    print(\"\\nEigenvector comparison:\")\n","    for i in range(len(eigenvectors_power)):\n","        eigenvector_qr = eigenvectors_qr[:, i] / np.linalg.norm(eigenvectors_qr[:, i])\n","\n","# Example usage\n","A = np.array([[4, 1, 1], [1, 3, -1], [1, -1, 2]])\n","\n","eigenvalues_power, eigenvectors_power = power_iteration(A)\n","eigenvalues_qr, eigenvectors_qr = qr_algorithm(A)\n","\n","compare_results(eigenvalues_power, eigenvectors_power, eigenvalues_qr, eigenvectors_qr)\n","\n"]}]}